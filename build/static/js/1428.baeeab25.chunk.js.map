{"version":3,"file":"static/js/1428.baeeab25.chunk.js","mappings":"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","sources":["graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/useTokenInput.ts","nft/hooks/useFetchAssets.ts","nft/hooks/usePurchaseAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/ButtonStates.tsx","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/components/modals/Overlay.tsx","nft/components/modals/Overlay.css.ts","nft/hooks/useBagTotalEthPrice.ts"],"sourcesContent":["import { ChainId } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { isSupportedChain } from 'constants/chains'\nimport gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function getURAddress(chainId?: number, nftURAddress?: string): string | undefined {\n  if (!chainId) return undefined\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === ChainId.MAINNET) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n  }\n  return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n}\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: readonly NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { devtools } from 'zustand/middleware'\nimport { shallow } from 'zustand/shallow'\nimport { createWithEqualityFn } from 'zustand/traditional'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = createWithEqualityFn<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  ),\n  shallow\n)\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus } from 'nft/types'\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { useCallback, useMemo } from 'react'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    })\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(({ setLocked, setBagExpanded, reset }) => ({\n    setLocked,\n    setBagExpanded,\n    reset,\n  }))\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { ClassicTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: ClassicTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = isClassicTrade(trade) && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.deprecated_accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.neutral2,\n    buttonColor: theme.accent1,\n    buttonTextColor: theme.deprecated_accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.surface3,\n      buttonTextColor: theme.neutral1,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accent1,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId, Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendAnalyticsEvent, TraceEvent } from 'analytics'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain } from 'constants/chains'\nimport { getURAddress, useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeFillType, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.BodySmall)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 535;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 535;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"535\">\n        {formatEther({ input: totalEthPrice.toString(), type: NumberType.NFTToken })}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"neutral3\" lineHeight=\"20px\" fontWeight=\"535\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'neutral3' : 'neutral1'}>\n      {formatNumberOrString({ input: trade?.inputAmount.toExact(), type: NumberType.NFTToken })}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  const { formatNumberOrString } = useFormatter()\n\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"neutral3\" lineHeight=\"20px\">\n        {`${formatNumberOrString({ input: usdcValue?.toExact(), type: NumberType.FiatNFTToken })}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }))\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n    isLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  }))\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === ChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(chainId, universalRouterAddress),\n    TradeFillType.Classic\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== ChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== ChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, ChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED\n    const handleClick = () => allowanceRequired && allowance.approveAndPermit()\n\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n    }\n\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n      }\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={535} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.neutral2} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall>\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(({ setBagExpanded, setBagStatus, setLocked }) => ({\n    setBagExpanded,\n    setBagStatus,\n    setLocked,\n  }))\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useDebouncedTrade } from 'hooks/useDebouncedTrade'\nimport { useMemo } from 'react'\nimport { ClassicTrade, RouterPreference, TradeState } from 'state/routing/types'\nimport { isClassicTrade } from 'state/routing/utils'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: ClassicTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? undefined,\n    RouterPreference.API\n  )\n\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : undefined)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { useMemo } from 'react'\nimport { ClassicTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: ClassicTrade): PriceImpact | undefined {\n  const theme = useTheme()\n  const { formatPercent } = useFormatter()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.critical\n        : priceImpactWarning === 'warning'\n        ? theme.deprecated_accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => formatPercent(marketPriceImpact),\n        }\n      : undefined\n  }, [formatPercent, theme.critical, theme.deprecated_accentWarning, trade])\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accent1};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xZ25yNnJjYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzFnbnI2cmNiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMWducjZyY2I6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LmRtNmZhaTEgewogIG1hcmdpbi1sZWZ0OiAtNHB4OwogIG1hcmdpbi1yaWdodDogLTRweDsKfQouZG02ZmFpMTpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tZ2VuaWUtY29sb3JzLWRlcHJlY2F0ZWRfc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5kbTZmYWk3IHsKICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTsKfQouZG02ZmFpOSB7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0KLmRtNmZhaWIgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = 'dm6faib _1xzbheqbf _1xzbheqd9 _1xzbheq8bh _1xzbheq45r _1xzbheq45l';\nexport var bagRow = 'dm6fai1 _1xzbheq2dr _1xzbheq2j9 _1xzbheq2of _1xzbheq27x _1xzbheq4b9 _1xzbheq3tf _1xzbheq7zd _1xzbheq1dr _1xzbheq80x';\nexport var bagRowImage = '_1xzbheq149 _1xzbheq1b9 _1xzbheq49l _1xzbheq80p';\nexport var bagRowPrice = 'dm6fai9 _1xzbheq3sr _1xzbheqbf _1xzbheqd9 _1xzbheq3xr';\nexport var collectionName = '_1xzbheqd3 _1xzbheqb9 _1xzbheqe3 _1xzbheq8bh _1xzbheq45l _1xzbheq45r _1xzbheq4bf';\nexport var grayscaleImage = 'dm6fai7';\nexport var icon = '_1xzbheq3xr';\nexport var priceChangeColumn = '_1xzbheq2p3 _1xzbheq28l _1xzbheqlf _1xzbheqqx _1xzbheq4ux _1xzbheq3t3 _1xzbheq4b9 _1xzbheq7zp _1xzbheq895 _1xzbheq59f _1xzbheq5yr _1xzbheq1dr _1xzbheq7zd';\nexport var priceChangeRow = '_1xzbheqd3 _1xzbheqb9 _1xzbheqe3 _1xzbheq4dr _1xzbheq3sr';\nexport var unavailableAssetsContainer = '_1xzbheq2p3 _1xzbheq28l _1xzbheqlf _1xzbheqqx _1xzbheq4ux _1xzbheq3tf _1xzbheq4b9 _1xzbheq7zp _1xzbheq895 _1xzbheq59f _1xzbheq6df _1xzbheq5yr _1xzbheq1dr';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther as ethersFormatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"book\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const { formatEther, formatNumberOrString } = useFormatter()\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatEther({ input: assetEthPrice, type: NumberType.NFTToken })\n  const assetUSDPriceFormatted = formatNumberOrString({\n    input: usdPrice ? parseFloat(ethersFormatEther(assetEthPrice)) * usdPrice : usdPrice,\n    type: NumberType.FiatNFTToken,\n  })\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'neutral2' : 'neutral1'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const { formatEther } = useFormatter()\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'surface3' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatEther({\n          input: asset.priceInfo.ETHPrice,\n          type: NumberType.NFTToken,\n        })} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"surface1\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"neutral2\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"neutral2\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"neutral1\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile, useNativeUsdPrice } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const ethUsdPrice = useNativeUsdPrice()\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: ethUsdPrice,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, ethUsdPrice])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: ethUsdPrice,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={ethUsdPrice}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={ethUsdPrice}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={ethUsdPrice}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { ButtonText, ThemedText } from 'theme/components'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.neutral2};\n  cursor: pointer;\n  font-weight: 535;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accent1};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 17\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.neutral3} />\n        ) : (\n          <BagIcon color={themeVars.colors.neutral3} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"book\" color=\"neutral2\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"neutral1\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { sendAnalyticsEvent } from 'analytics'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 535;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'surface3'}\n    borderBottomColor={top ? 'surface3' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(({ reset, sellAssets }) => ({\n    resetSellAssets: reset,\n    sellAssets,\n  }))\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag((state) => ({\n    ...state,\n    bagIsLocked: state.isLocked,\n    uncheckedItemsInBag: state.itemsInBag,\n  }))\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xYzVodHFuMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWM1aHRxbjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWM1aHRxbjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1c5htqn1 _1xzbheq2ef _1xzbheq2jx _1xzbheq1yr _1xzbheq8ct';\nexport var bagContainer = '_1c5htqn3 _1xzbheq48r _1xzbheq3f3 _1xzbheq3iy _1xzbheq16r _1xzbheq1dr _1xzbheq39l _1xzbheq4qf _1xzbheq7zx _1xzbheq55f _1xzbheq895 _1xzbheq4b9';","import noop from 'utils/noop'\n\nimport { Box } from '../Box'\nimport * as styles from './Overlay.css'\n\ninterface OverlayProps {\n  onClick?: () => void\n}\n\nexport const stopPropagation = (event: React.SyntheticEvent<HTMLElement>) => {\n  event.stopPropagation()\n  event.nativeEvent.stopImmediatePropagation()\n}\n\nexport const Overlay = ({ onClick = noop }: OverlayProps) => {\n  return <Box className={styles.overlay} onClick={onClick} />\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/modals/Overlay.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/modals/Overlay.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xeDVrbTNoMSB7CiAgb3BhY2l0eTogMC43MjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDEwMzg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var overlay = '_1x5km3h1 _1xzbheq3f3 _1xzbheq343 _1xzbheq17l _1xzbheq1ef _1xzbheq48r _1xzbheq44l _1xzbheq4u3';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n"],"names":["gql","getNextBagState","wishAssetsToBuy","route","purchasingWithErc20","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","shouldRefetchCalldata","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasAssets","length","hasAssetsInReview","hasUnavailableAssets","shouldReview","newBagItems","map","unavailableAsset","asset","status","BagItemStatus","UNAVAILABLE","changedAsset","REVIEWING_PRICE_CHANGE","unchangedAsset","REVIEWED","createBagFromUpdatedAssets","nextBagStatus","BagStatus","IN_REVIEW","CONFIRM_REVIEW","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","ADDING_TO_BAG","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","undefined","sendAmount","data","calldata","to","toAddress","useTokenInput","createWithEqualityFn","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","shallow","useFetchAssets","account","useWeb3React","itemsInBag","uncheckedItemsInBag","setBagStatus","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isLocked","bagIsLocked","setLocked","setBagLocked","setItemsInBag","useBag","state","useMemo","recalculateBagUsingPooledAssets","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","provider","sendTransaction","useSendTransaction","setTransactionResponse","useTransactionResponse","setBagExpanded","reset","resetBag","useCallback","async","routingData","assetsToBuy","purchaseResponse","getSigner","bagExpanded","usePurchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","filter","item","getPurchasableAssets","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","quotient","token","isToken","chainId","isNative","pools","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","isClassicTrade","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","getBuyButtonStateData","buyButtonState","theme","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","disabled","warningText","warningTextColor","deprecated_accentWarning","helperText","helperTextColor","neutral2","buttonColor","accent1","buttonTextColor","deprecated_accentTextLightPrimary","BuyButtonStates","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","surface3","neutral1","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","priceImpactSeverity","color","PAY","FooterContainer","styled","div","Footer","FooterHeader","Column","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","BodySmall","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","formatEther","formatNumberOrString","useFormatter","TradeState","LOADING","input","toExact","type","NumberType","NFTToken","fontWeight","symbol","FiatValue","usdcValue","MouseoverTooltip","text","size","style","displayPercentage","FiatNFTToken","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","BagFooter","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","useTheme","connector","connected","Boolean","useBagTotalEthPrice","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus","tokenSelectorOpen","setTokenSelectorOpen","useState","isPending","includes","ChainId","MAINNET","universalRouterAddress","universalRouterAddressIsLoading","loading","useNftUniversalRouterAddressQuery","fetchPolicy","useNftUniversalRouterAddress","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","maximumAmountIn","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","useDerivedPayWithAnyTokenSwapInfo","usePermit2Allowance","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","isSupportedChain","getURAddress","TradeFillType","Classic","loadingAllowance","AllowanceState","formatPercent","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","critical","usePriceImpact","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balance","balanceInEth","useWalletBalance","sufficientBalance","lessThan","parseEther","gte","switchChain","useSwitchChain","VALID","allowanceRequired","REQUIRED","approveAndPermit","isApprovalPending","isApprovalLoading","traceEventProperties","usd_value","using_erc20","gap","SubHeaderSmall","onClick","sendAnalyticsEvent","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","TraceEvent","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","br","BagRow","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","ethersFormatEther","handleRemoveClick","e","preventDefault","stopPropagation","Link","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","susFlag","Suspicious","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","medium","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","toggleOpen","useReducer","s","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","marginBottom","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","removeAssetsFromBag","useIsMobile","ethUsdPrice","useNativeUsdPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","ADDED_TO_BAG","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","getCircleSizing","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","colors","neutral3","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","img","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","surface1","deprecated_shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","setProfilePageState","useProfilePageState","toggleBag","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","event","nativeEvent","stopImmediatePropagation","noop","reduce","total","add","useBagTotalUsdPrice"],"sourceRoot":""}